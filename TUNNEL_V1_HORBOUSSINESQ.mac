! TUNNEL_V1_HORBOUSSINESQ, loadDirection, xMin, xMax
! TUNNEL_V1_HORBOUSSINESQ,          arg1, arg2, arg3


! Force direction (positive or negative X)
*if,arg1,GE,0,THEN
    direction=1
*else
    direction=-1
*endif

! Determine whether or not to check for minimum X position
*get,parType,parm,arg2,type
*if,parType,eq,0,then
    checkXMin=1
*else
    checkXMin=0
*endif

! Determine whether or not to check for maximum X position
*get,parType,parm,arg3,type
*if,parType,eq,0,then
    checkXMax=1
*else
    checkXMax=0
*endif

! X-Z coordinates at the center of the tunnel
QX_0=GEO_TUN_totEffW/2
QZ_0=LOAD_z0

! Fill array with node selection status
*del, NLIST_nsel
*vget,NLIST_nsel,node,,nsel

*do,nthLine,1,LOAD_LTA_count,1

    *do,nthPointLoad,1,LOAD_LTPtCount,1

        ForceValue=LOADTRAIN_ARR_loads(nthPointLoad)
        LoadPosition=LOADTRAIN_ARR_positions(nthPointLoad)

        QX_i=LoadPosition+xOffset
        QY=Eff_GalleryHeight+GEO_EMB_height
        QZ_i=zOffsets(nthLine)
        TUNNEL_V1_LTPOS, QX_i, QZ_i, QX_0, QZ_0, -LOAD_LTA_skewRad, 0

        calculateLoad=1

        ! Load position check: X greater than minimum
        *if,checkXMin,eq,1,then
            *if,QX,lt,arg2,then
                calculateLoad=0
            *endif
        *endif

        ! Load position check: X smaller than maximum
        *if,checkXMax,eq,1,then
            *if,QX,gt,arg3,then
                calculateLoad=0
            *endif
        *endif

        *if,calculateLoad,eq,1,then

            ! Initialize arrays
            *del, deltaX
            *del, deltaY
            *del, deltaZ
            *del, deltaXSquared
            *del, deltaYSquared
            *del, deltaZSquared
            *del, tmp
            *del, dist
            *del, pressures
            *del, forces
            *del, appliedForces
            *del, selNodes

            ! Calculate distances
            *voper,deltaX,QX,sub,NLIST_x
            *voper,deltaY,QY,sub,NLIST_y
            *voper,deltaZ,QZ,sub,NLIST_z

            *vfun, deltaXSquared , pwr , deltaX , 2
            *vfun, deltaYSquared , pwr , deltaY , 2
            *vfun, deltaZSquared , pwr , deltaZ , 2

            *voper, tmp  , deltaXSquared , add , deltaYSquared
            *voper, tmp  ,           tmp , add , deltaZSquared
            *vfun , dist ,          sqrt , tmp

            ! Boussinesq formula: 6*F*rÂ²*z/(2*PI*D^5)
            *vfun ,       tmp , pwr , dist , 5
            *voper,       tmp , tmp , mult , 2*PI
            *vfun ,       tmp , pwr ,  tmp , -1
            *voper,       tmp , tmp , mult , deltaY
            *voper,       tmp , tmp , mult , deltaXSquared
            *voper, pressures , tmp , mult , 6*ForceValue

            ! Calculate nodal forces
            *voper,        forces , pressures , mult , NLIST_apportioned
            *voper,        forces ,    forces , mult , direction

            *vmask,    NLIST_nsel
            *vfun , appliedForces ,      comp , forces

            *vmask,    NLIST_nsel
            *vfun ,      selNodes ,      comp , NLIST_num

            *get,selCount,parm,selNodes,dim,x

            ! Apply forces
            f,selNodes(1:selCount),fx,appliedForces(1:selCount)

        *endif

    *enddo

*enddo







