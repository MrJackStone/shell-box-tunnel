! TUNNEL_V2_ETAB


! Output element tables:

! Auxiliary: ----------------------------------- 1
! ZEROS

! DOFs: --------------------------------------- 24
! DW_UX      EMN_UX     EMX_UX     EAB_UX
! DW_UY      EMN_UY     EMX_UY     EAB_UY
! DW_UZ      EMN_UZ     EMX_UZ     EAB_UZ
! DW_ROTX    EMN_ROTX   EMX_ROTX   EAB_ROTX
! DW_ROTY    EMN_ROTY   EMX_ROTY   EAB_ROTY
! DW_ROTZ    EMN_ROTZ   EMX_ROTZ   EAB_ROTZ

! SHELL181 (raw): ----------------------------- 35
! DW_MX      EMN_MX     EMX_MX     EAB_MX
! DW_MY      EMN_MY     EMX_MY     EAB_MY
! DW_NX      EMN_NX     EMX_NX     EAB_NX
! DW_NY      EMN_NY     EMX_NY     EAB_NY
! DW_QX      EMN_QX     EMX_QX     EAB_QX
! DW_QY      EMN_QY     EMX_QY     EAB_QY
! DW_Q       EMN_Q      EMX_Q      EAB_Q
! -          EPOS_MY    ENEG_MX    -
! -          EPOS_MX    ENEG_MY    -
! DLT_MX     DLT_MY     DLT_NX     DLT_NY
! DLT_Q      -          -          -

! SHELL181 (averaged by convolution): --------- 14
! ADW_MX     AEMN_MX    AEMX_MX    AEAB_MX
! ADW_MY     AEMN_MY    AEMX_MY    AEAB_MY
! ADW_Q      -          -          AEAB_Q
! -          AEPOS_MX   AENEG_MX   -
! -          AEPOS_MY   AENEG_MY   -

! Service limit state deflections: ------------ 12
! UX_gk      UX_qk      UX_k       UX_frq
! UY_gk      UY_qk      UY_k       UY_frq
! UZ_gk      UZ_qk      UZ_k       UZ_frq
!
! Legend:
!    U?_gk   -  dead loads, characteristic value
!    U?_qk   -  live loads, characteristic value
!    U?_k    -  dead + live loads, characteristic values
!    U?_frq  -  SLS frequent combination (uses PSI1)

! Reaction soil pressures: --------------------- 4
! SIGY_gk    SIGY_qk    SIGY_k     SIGY_a
!
! Legend:
!    SIGY_?? -  sigma (normal stress) in the Y direction
!    SIGY_gk -  dead loads, characteristic value
!    SIGY_qk -  live loads, characteristic value
!    SIGY_k  -  dead + live loads, characteristic values
!    SIGY_a  -  added pressure (total - dead)
!
! Note:
!    SIGY_qk seems to be useless. Because of nonlinear effects,
!    the best way to calculate added pressure is by subtracting
!    dead load (g) pressures from total pressure (g+k).

! Applied soil pressures: --------------------- (5)
! LS[i]_PX   LS[i]_PY   LS[i]_PZ   -
! NET[i]_PX  NET[i]_PY
!
! Note:
!    These element tables are immediately deleted after used
!    to generate plots, and therefore do not add to the overall
!    limit of 200 element tables.
!    Index 'i' stands for load step number, making the total
!    count of element tables of this kind dependent upon a
!    volatile input parameter (number of load train positions).
!    For i=1 (dead loads) the 'NET' ETABLEs are not created.

! NOTE: all characteristic values (k) include impact coefficient

! TOTAL element table count: ------------------ 90 (95)


/post1

allsel

! Auxiliary element tables
*vget  , element_numbers       , elem    ,         , elist
*get   , ec                    , elem    ,         , count
etable , 'DUMMY'               , volu
sadd   , 'ZEROS'               , 'DUMMY' , 'DUMMY' , 1     , -1
detab  , element_numbers(1:ec) , 'ZEROS' , 0
etable , 'DUMMY'               , eras


!! Dead weight results (first load step) element tables                                           !!
allsel
set,first

defetabs , 0   , 'DW_' , 1e3  , 1
defetabs , 181 , 'DW_' , 1e-3 , 1

! SHELL181 oblique shear force
etbsqsum , 'DW_Q' , 'DW_QX' , 'DW_QY'


!! Envelope including dead & live loads:                                                          !!
baseTableCount = 12

*del , etable_suffixes ,      , nopr
*del , etable_scales   ,      , nopr
*dim , etable_suffixes , char , baseTableCount
*dim , etable_scales   ,      , baseTableCount

etable_suffixes(1)  = 'UX' , 'UY' , 'UZ'  , 'ROTX' , 'ROTY' , 'ROTZ'
etable_scales(1)    = 1e3  , 1e3  , 1e3   , 1e3    , 1e3    , 1e3
etable_suffixes(7)  = 'MX' , 'MY' , 'NX'  , 'NY'   , 'QX'   , 'QY'
etable_scales(7)    = 1e-3 , 1e-3 , 1e-3  , 1e-3   , 1e-3   , 1e-3

! Create element tables that update with REFL
defetabs , 0   ,  , 1 , 0
defetabs , 181 ,  , 1 , 0

! Loop over load steps updating element tables
etenv,1,LoadStepCount,'etable_suffixes'

! Scale envelope element tables
*do,nthEtable,1,baseTableCount,1
  etSuffix = etable_suffixes(nthEtable)
  etScale  = etable_scales(nthEtable)
  sadd,'EMX_%etSuffix%','EMX_%etSuffix%',,etScale
  sadd,'EMN_%etSuffix%','EMN_%etSuffix%',,etScale
  sadd,'EAB_%etSuffix%','EAB_%etSuffix%',,etScale
*enddo

! Delete unused tables
*do,nthEtable,1,baseTableCount,1
  etSuffix = etable_suffixes(nthEtable)
  etable,'%etSuffix%',eras
*enddo

! Oblique shear force
etbsqsum , 'EAB_Q' , 'EAB_QX' , 'EAB_QY'

! Positive/negative-only bending moments
smax   , 'ENEG_MX' , 'EMX_MX' , 'ZEROS'
smax   , 'EPOS_MX' , 'EMN_MX' , 'ZEROS'  , -1
smax   , 'ENEG_MY' , 'EMX_MY' , 'ZEROS'
smax   , 'EPOS_MY' , 'EMN_MY' , 'ZEROS'  , -1


!! Element tables calculated based on DW & ENV values                                             !!
! NOTE: because of the AREMA approach to calculate impact coefficient (depth-dependent value),
!       it is not possible to cleanly remove the influence of said impact coefficient in post.
!       Therefore, loads labeled as "characteristic" (k index) still include the effect of the
!       impact coefficient, if one was applied.

! Deflections
sadd   , 'UX_g'   , 'DW_UX'  ,         , 1
sadd   , 'UX_d'   , 'EMN_UX' ,         , 1
sadd   , 'UX_gk'  , 'UX_g'   ,         , 1/LOAD_gammaG
sadd   , 'UX_q'   , 'UX_d'   , 'UX_g'  , 1             , -1
sadd   , 'UX_qk'  , 'UX_q'   ,         , 1/LOAD_gammaQ
sadd   , 'UX_k'   , 'UX_g'   , 'UX_q'  , 1             , 1
sadd   , 'UX_frq' , 'UX_gk'  , 'UX_qk' , 1             , LOAD_psi1
etable , 'UX_g'   , eras
etable , 'UX_d'   , eras
etable , 'UX_q'   , eras

sadd   , 'UY_g'   , 'DW_UY'  ,         , 1
sadd   , 'UY_d'   , 'EMN_UY' ,         , 1
sadd   , 'UY_gk'  , 'UY_g'   ,         , 1/LOAD_gammaG
sadd   , 'UY_q'   , 'UY_d'   , 'UY_g'  , 1             , -1
sadd   , 'UY_qk'  , 'UY_q'   ,         , 1/LOAD_gammaQ
sadd   , 'UY_k'   , 'UY_g'   , 'UY_q'  , 1             , 1
sadd   , 'UY_frq' , 'UY_gk'  , 'UY_qk' , 1             , LOAD_psi1
etable , 'UY_g'   , eras
etable , 'UY_d'   , eras
etable , 'UY_q'   , eras

sadd   , 'UZ_g'   , 'DW_UZ'  ,         , 1
sadd   , 'UZ_d'   , 'EMN_UZ' ,         , 1
sadd   , 'UZ_gk'  , 'UZ_g'   ,         , 1/LOAD_gammaG
sadd   , 'UZ_q'   , 'UZ_d'   , 'UZ_g'  , 1             , -1
sadd   , 'UZ_qk'  , 'UZ_q'   ,         , 1/LOAD_gammaQ
sadd   , 'UZ_k'   , 'UZ_g'   , 'UZ_q'  , 1             , 1
sadd   , 'UZ_frq' , 'UZ_gk'  , 'UZ_qk' , 1             , LOAD_psi1
etable , 'UZ_g'   , eras
etable , 'UZ_d'   , eras
etable , 'UZ_q'   , eras


!! Soil pressure                                                                                  !!
Nmm2kNm = 1e-6

sadd , 'SIGY_gk' , 'UY_gk' ,  , MAT_SOIL_stiffness*Nmm2kNm*(-1)
sadd , 'SIGY_qk' , 'UY_qk' ,  , MAT_SOIL_stiffness*Nmm2kNm*(-1)
sadd , 'SIGY_k'  , 'UY_k'  ,  , MAT_SOIL_stiffness*Nmm2kNm*(-1)
sadd , 'SIGY_a' , 'SIGY_k' , 'SIGY_gk' , 1 , -1

smax , 'SIGY_gk' , 'SIGY_gk' , 'ZEROS'
smax , 'SIGY_qk' , 'SIGY_qk' , 'ZEROS'
smax , 'SIGY_k'  , 'SIGY_k'  , 'ZEROS'
smax , 'SIGY_a'  , 'SIGY_a'  , 'ZEROS'


!! Average results by performing convolution                                                      !!
TUNNEL_V2_ETCVL


!! Applied forces, converted to pressures                                                         !!
N2kN = 1e-3

*do,nthLS,1,LoadStepCount,1
  allsel
  set,nthLS
  esel,s,type,,TYPE_shell181
  nsle,s

  ! Total applied pressures
  etbfor2pres,N2kN,'LS%nthLS%_P'

  ! Net live load pressure increases
  *if,nthLS,gt,1,then
    sadd,NET%nthLS%_PX,LS%nthLS%_PX,LS1_PX,1,-1
    sadd,NET%nthLS%_PY,LS%nthLS%_PY,LS1_PY,1,-1
  *endif
*enddo







/eof




!!                                                                                                !!
!!                                                                                                !!
!!                                                                                                !!
!!                                                                                                !!
!!                                                                                                !!
!!                                                                                                !!


! Criar tabelas
etable , fx      , smisc , 1
etable , fy      , smisc , 2
etable , mx      , smisc , 4
etable , my      , smisc , 5
etable , mt      , smisc , 6
etable , qx      , smisc , 7
etable , qy      , smisc , 8
etable , deslocy , u     , y
etable , deslocx , u     , x

ESEL,S,MAT,,1
/view,,1,1,1
/auto,1
/eshape,1


!! Combinar load steps: obter valores máximos e mínimos das element tables                      !!
! MX
SMAX,MX_MAX,MX
SMIN,MX_MIN,MX
! MY
SMAX,MY_MAX,MY
SMIN,MY_MIN,MY
! MT
SMAX,MT_MAX,MT
! FX
SMAX,FX_MAX,FX
SMIN,FX_MIN,FX
! FY
SMAX,FY_MAX,FY
SMIN,FY_MIN,FY
! QX
SMAX,QX_MAX,QX
! QY
SMAX,QY_MAX,QY
! DESLOCX
SMAX,DESLOCX_MAX,DESLOCX
SMIN,DESLOCX_MIN,DESLOCX
! DESLOCY
SMAX,DESLOCY_MAX,DESLOCY
SMIN,DESLOCY_MIN,DESLOCY

! Componentes para cálculo de flecha
CSYS,CS_Tunnel
ESEL,S,TYPE,,1
NSEL,S,LOC,X,0
NSEL,R,LOC,Y,Eff_GalleryHeight
NSLE,R
CM,COMPN_leftExt,NODE
*get,NC,NODE,,COUNT
ESEL,S,TYPE,,1
NSEL,S,LOC,X,Eff_GalleryWidth
NSEL,R,LOC,Y,Eff_GalleryHeight
NSLE,R
CM,COMPN_rightExt,NODE
maxDeflection=0
CSYS,0

*do,nthLoadStep,1,LoadStepCount,1

  ESEL,S,MAT,,1
  SET,nthLoadStep
  ETABLE,REFL

  ! MX
  SMAX,MX_MAX,MX_MAX,MX,1,1
  SMIN,MX_MIN,MX_MIN,MX,1,1
  ! MY
  SMAX,MY_MAX,MY_MAX,MY,1,1
  SMIN,MY_MIN,MY_MIN,MY,1,1
  ! MT
  SABS,1
  SMAX,MT_MAX,MT_MAX,MT,1,1
  SABS,0
  ! FX
  SMAX,FX_MAX,FX_MAX,FX,1,1
  SMIN,FX_MIN,FX_MIN,FX,1,1
  ! FY
  SMAX,FY_MAX,FY_MAX,FY,1,1
  SMIN,FY_MIN,FY_MIN,FY,1,1
  ! QX
  SABS,1
  SMAX,QX_MAX,QX_MAX,QX,1,1
  SABS,0
  ! QY
  SABS,1
  SMAX,QY_MAX,QY_MAX,QY,1,1
  SABS,0
  ! DESLOCX
  SMAX,DESLOCX_MAX,DESLOCX_MAX,DESLOCX,1,1
  SMIN,DESLOCX_MIN,DESLOCX_MIN,DESLOCX,1,1
  ! DESLOCY
  SMAX,DESLOCY_MAX,DESLOCY_MAX,DESLOCY,1,1
  SMIN,DESLOCY_MIN,DESLOCY_MIN,DESLOCY,1,1

  !TUNNEL_V2_DEFLECT
  ! output: maxDeflection

*enddo
RoofSlab_maxDeflection=maxDeflection

ESEL,S,TYPE,,1
NSLE,S,ACTIVE
/show
PLETAB,'FX_MAX',1
/graphics,FULL
TAKEPIC,'FX_MAX',1200
/show
PLETAB,'FX_MIN',1
/graphics,FULL
TAKEPIC,'FX_MIN',1200
/show
PLETAB,'FY_MAX',1
/graphics,FULL
TAKEPIC,'FY_MAX',1200
/show
PLETAB,'FY_MIN',1
/graphics,FULL
TAKEPIC,'FY_MIN',1200
/show
PLETAB,'MX_MAX',1
/graphics,FULL
TAKEPIC,'MX_MAX',1200
/show
PLETAB,'MX_MIN',1
/graphics,FULL
TAKEPIC,'MX_MIN',1200
/show
PLETAB,'MY_MAX',1
/graphics,FULL
TAKEPIC,'MY_MAX',1200
/show
PLETAB,'MY_MIN',1
/graphics,FULL
TAKEPIC,'MY_MIN',1200
/show
PLETAB,'QX_MAX',1
/graphics,FULL
TAKEPIC,'QX_MAX',1200
/show
PLETAB,'QY_MAX',1
/graphics,FULL
TAKEPIC,'QY_MAX',1200

! MX
ETINDEX,'MX_MAX'
MXPosIndex=_OUTPUT
ETINDEX,'MX_MIN'
MXNegIndex=_OUTPUT

! MY
ETINDEX,'MY_MAX'
MYPosIndex=_OUTPUT
ETINDEX,'MY_MIN'
MYNegIndex=_OUTPUT

! MT
ETINDEX,'MT_MAX'
MTIndex=_OUTPUT

! FX
ETINDEX,'FX_MAX'
FXPosIndex=_OUTPUT
ETINDEX,'FX_MIN'
FXNegIndex=_OUTPUT

! FY
ETINDEX,'FY_MAX'
FYPosIndex=_OUTPUT
ETINDEX,'FY_MIN'
FYNegIndex=_OUTPUT

! QX
ETINDEX,'QX_MAX'
QXIndex=_OUTPUT

! QY
ETINDEX,'QY_MAX'
QYIndex=_OUTPUT

ALLSEL


!! Laje de piso                                                                                   !!
ASEL,S,LOC,Y,0
ASEL,R,LOC,Z,0,GEO_TUN_length
ESLA,S

*get,ECount,ELEM,0,COUNT
*get,EMin,ELEM,,NUM,MIN

! Inicializar vetores
*del,MXPosValues
*del,MXNegValues
*del,MYPosValues
*del,MYNegValues
*del,FXPosValues
*del,FXNegValues
*del,FYPosValues
*del,FYNegValues
*del,QXValues
*del,QYValues
*dim,MXPosValues,ARRAY,ECount
*dim,MXNegValues,ARRAY,ECount
*dim,MYPosValues,ARRAY,ECount
*dim,MYNegValues,ARRAY,ECount
*dim,FXPosValues,ARRAY,ECount
*dim,FXNegValues,ARRAY,ECount
*dim,FYPosValues,ARRAY,ECount
*dim,FYNegValues,ARRAY,ECount
*dim,QXValues,ARRAY,ECount
*dim,QYValues,ARRAY,ECount
! Coletar dados das element tables
*vget,MXPosValues(1),ELEM,EMin,ETAB,'MX_MAX',,,0
*vget,MXNegValues(1),ELEM,EMin,ETAB,'MX_MIN',,,0
*vget,MYPosValues(1),ELEM,EMin,ETAB,'MY_MAX',,,0
*vget,MYNegValues(1),ELEM,EMin,ETAB,'MY_MIN',,,0
*vget,FXPosValues(1),ELEM,EMin,ETAB,'FX_MAX',,,0
*vget,FXNegValues(1),ELEM,EMin,ETAB,'FX_MIN',,,0
*vget,FYPosValues(1),ELEM,EMin,ETAB,'FY_MAX',,,0
*vget,FYNegValues(1),ELEM,EMin,ETAB,'FY_MIN',,,0
*vget,QXValues(1),ELEM,EMin,ETAB,'QX_MAX',,,0
*vget,QYValues(1),ELEM,EMin,ETAB,'QY_MAX',,,0
! Obter máximos e mínimos
*vscfun,FloorMXMax,MAX,MXPosValues
*vscfun,FloorMXMin,MIN,MXNegValues
*vscfun,FloorMYMax,MAX,MYPosValues
*vscfun,FloorMYMin,MIN,MYNegValues
*vscfun,FloorFXMax,MAX,FXPosValues
*vscfun,FloorFXMin,MIN,FXNegValues
*vscfun,FloorFYMax,MAX,FYPosValues
*vscfun,FloorFYMin,MIN,FYNegValues
*vscfun,FloorQXMax,MAX,QXValues
*vscfun,FloorQYMax,MAX,QYValues


!! Laje de teto                                                                                   !!
ASEL,S,LOC,Y,Eff_GalleryHeight
ASEL,R,LOC,Z,0,GEO_TUN_length
ESLA,S

*get,ECount,ELEM,0,COUNT
*get,EMin,ELEM,,NUM,MIN

! Inicializar vetores
*del,MXPosValues
*del,MXNegValues
*del,MYPosValues
*del,MYNegValues
*del,FXPosValues
*del,FXNegValues
*del,FYPosValues
*del,FYNegValues
*del,QXValues
*del,QYValues
*dim,MXPosValues,ARRAY,ECount
*dim,MXNegValues,ARRAY,ECount
*dim,MYPosValues,ARRAY,ECount
*dim,MYNegValues,ARRAY,ECount
*dim,FXPosValues,ARRAY,ECount
*dim,FXNegValues,ARRAY,ECount
*dim,FYPosValues,ARRAY,ECount
*dim,FYNegValues,ARRAY,ECount
*dim,QXValues,ARRAY,ECount
*dim,QYValues,ARRAY,ECount
! Coletar dados das element tables
*vget,MXPosValues(1),ELEM,EMin,ETAB,'MX_MAX',,,0
*vget,MXNegValues(1),ELEM,EMin,ETAB,'MX_MIN',,,0
*vget,MYPosValues(1),ELEM,EMin,ETAB,'MY_MAX',,,0
*vget,MYNegValues(1),ELEM,EMin,ETAB,'MY_MIN',,,0
*vget,FXPosValues(1),ELEM,EMin,ETAB,'FX_MAX',,,0
*vget,FXNegValues(1),ELEM,EMin,ETAB,'FX_MIN',,,0
*vget,FYPosValues(1),ELEM,EMin,ETAB,'FY_MAX',,,0
*vget,FYNegValues(1),ELEM,EMin,ETAB,'FY_MIN',,,0
*vget,QXValues(1),ELEM,EMin,ETAB,'QX_MAX',,,0
*vget,QYValues(1),ELEM,EMin,ETAB,'QY_MAX',,,0
! Obter máximos e mínimos
*vscfun,RoofMXMax,MAX,MXPosValues
*vscfun,RoofMXMin,MIN,MXNegValues
*vscfun,RoofMYMax,MAX,MYPosValues
*vscfun,RoofMYMin,MIN,MYNegValues
*vscfun,RoofFXMax,MAX,FXPosValues
*vscfun,RoofFXMin,MIN,FXNegValues
*vscfun,RoofFYMax,MAX,FYPosValues
*vscfun,RoofFYMin,MIN,FYNegValues
*vscfun,RoofQXMax,MAX,QXValues
*vscfun,RoofQYMax,MAX,QYValues


!! Paredes externas                                                                               !!
ASEL,S,LOC,X,0
ASEL,A,LOC,X,GEO_TUN_modules*Eff_GalleryWidth
ESLA,S

*get,ECount,ELEM,0,COUNT
*get,EMin,ELEM,,NUM,MIN

! Inicializar vetores
*del,MXPosValues
*del,MXNegValues
*del,MYPosValues
*del,MYNegValues
*del,FXPosValues
*del,FXNegValues
*del,FYPosValues
*del,FYNegValues
*del,QXValues
*del,QYValues
*dim,MXPosValues,ARRAY,ECount
*dim,MXNegValues,ARRAY,ECount
*dim,MYPosValues,ARRAY,ECount
*dim,MYNegValues,ARRAY,ECount
*dim,FXPosValues,ARRAY,ECount
*dim,FXNegValues,ARRAY,ECount
*dim,FYPosValues,ARRAY,ECount
*dim,FYNegValues,ARRAY,ECount
*dim,QXValues,ARRAY,ECount
*dim,QYValues,ARRAY,ECount
! Coletar dados das element tables
*vget,MXPosValues(1),ELEM,EMin,ETAB,'MX_MAX',,,0
*vget,MXNegValues(1),ELEM,EMin,ETAB,'MX_MIN',,,0
*vget,MYPosValues(1),ELEM,EMin,ETAB,'MY_MAX',,,0
*vget,MYNegValues(1),ELEM,EMin,ETAB,'MY_MIN',,,0
*vget,FXPosValues(1),ELEM,EMin,ETAB,'FX_MAX',,,0
*vget,FXNegValues(1),ELEM,EMin,ETAB,'FX_MIN',,,0
*vget,FYPosValues(1),ELEM,EMin,ETAB,'FY_MAX',,,0
*vget,FYNegValues(1),ELEM,EMin,ETAB,'FY_MIN',,,0
*vget,QXValues(1),ELEM,EMin,ETAB,'QX_MAX',,,0
*vget,QYValues(1),ELEM,EMin,ETAB,'QY_MAX',,,0
! Obter máximos e mínimos
*vscfun,WallMXMax,MAX,MXPosValues
*vscfun,WallMXMin,MIN,MXNegValues
*vscfun,WallMYMax,MAX,MYPosValues
*vscfun,WallMYMin,MIN,MYNegValues
*vscfun,WallFXMax,MAX,FXPosValues
*vscfun,WallFXMin,MIN,FXNegValues
*vscfun,WallFYMax,MAX,FYPosValues
*vscfun,WallFYMin,MIN,FYNegValues
*vscfun,WallQXMax,MAX,QXValues
*vscfun,WallQYMax,MAX,QYValues


!! Paredes internas                                                                               !!
ASEL,S,LOC,Z,0,GEO_TUN_length
ASEL,U,LOC,Y,0
ASEL,U,LOC,Y,Eff_GalleryHeight
ASEL,U,LOC,X,0
ASEL,U,LOC,X,GEO_TUN_modules*Eff_GalleryWidth
ESLA,S

*get,ECount,ELEM,0,COUNT
*get,EMin,ELEM,,NUM,MIN

*if,ECount,NE,0,THEN

  InternalWalls=1

  ! Inicializar vetores
  *del,MXPosValues
  *del,MXNegValues
  *del,MYPosValues
  *del,MYNegValues
  *del,FXPosValues
  *del,FXNegValues
  *del,FYPosValues
  *del,FYNegValues
  *del,QXValues
  *del,QYValues
  *dim,MXPosValues,ARRAY,ECount
  *dim,MXNegValues,ARRAY,ECount
  *dim,MYPosValues,ARRAY,ECount
  *dim,MYNegValues,ARRAY,ECount
  *dim,FXPosValues,ARRAY,ECount
  *dim,FXNegValues,ARRAY,ECount
  *dim,FYPosValues,ARRAY,ECount
  *dim,FYNegValues,ARRAY,ECount
  *dim,QXValues,ARRAY,ECount
  *dim,QYValues,ARRAY,ECount
  ! Coletar dados das element tables
  *vget,MXPosValues(1),ELEM,EMin,ETAB,'MX_MAX',,,0
  *vget,MXNegValues(1),ELEM,EMin,ETAB,'MX_MIN',,,0
  *vget,MYPosValues(1),ELEM,EMin,ETAB,'MY_MAX',,,0
  *vget,MYNegValues(1),ELEM,EMin,ETAB,'MY_MIN',,,0
  *vget,FXPosValues(1),ELEM,EMin,ETAB,'FX_MAX',,,0
  *vget,FXNegValues(1),ELEM,EMin,ETAB,'FX_MIN',,,0
  *vget,FYPosValues(1),ELEM,EMin,ETAB,'FY_MAX',,,0
  *vget,FYNegValues(1),ELEM,EMin,ETAB,'FY_MIN',,,0
  *vget,QXValues(1),ELEM,EMin,ETAB,'QX_MAX',,,0
  *vget,QYValues(1),ELEM,EMin,ETAB,'QY_MAX',,,0
  ! Obter máximos e mínimos
  *vscfun,IntMXMax,MAX,MXPosValues
  *vscfun,IntMXMin,MIN,MXNegValues
  *vscfun,IntMYMax,MAX,MYPosValues
  *vscfun,IntMYMin,MIN,MYNegValues
  *vscfun,IntFXMax,MAX,FXPosValues
  *vscfun,IntFXMin,MIN,FXNegValues
  *vscfun,IntFYMax,MAX,FYPosValues
  *vscfun,IntFYMin,MIN,FYNegValues
  *vscfun,IntQXMax,MAX,QXValues
  *vscfun,IntQYMax,MAX,QYValues

*else

  InternalWalls = 0

  IntMXMax = 0
  IntMXMin = 0
  IntMYMax = 0
  IntMYMin = 0

  IntFXMax = 0
  IntFXMin = 0
  IntFYMax = 0
  IntFYMin = 0

  IntQXMax = 0
  IntQYMax = 0

*endif
